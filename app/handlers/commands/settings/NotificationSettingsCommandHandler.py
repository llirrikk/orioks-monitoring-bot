from aiogram import types
from aiogram.utils import markdown

import app
from app.handlers import AbstractCommandHandler
from app.helpers import UserHelper
from app.keyboards.notify_settings import NotifySettingsInlineKeyboard


class NotificationSettingsCommandHandler(AbstractCommandHandler):
    @staticmethod
    async def process(message: types.Message, *args, **kwargs):
        if not UserHelper.is_user_orioks_authenticated(
            user_telegram_id=message.from_user.id
        ):
            return await message.reply(
                markdown.text(
                    markdown.hbold('–ù—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.'),
                    markdown.text('–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç –û–†–ò–û–ö–°: /login'),
                    sep='\n',
                )
            )

        await NotificationSettingsCommandHandler.send_user_settings(
            message.from_user.id, callback_query=None
        )

    @staticmethod
    async def send_user_settings(
        user_id: int, callback_query: types.CallbackQuery = None
    ) -> types.Message:
        text = markdown.text(
            markdown.text(
                markdown.text('üìì'),
                markdown.text(
                    markdown.hbold('‚Äú–û–±—É—á–µ–Ω–∏–µ‚Äù'),
                    markdown.text(
                        '–∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –≤ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ-–±–∞–ª–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ (–ù–ë–°)'
                    ),
                    sep=': ',
                ),
                sep=' ',
            ),
            markdown.text(
                markdown.text('üì∞'),
                markdown.text(
                    markdown.hbold('‚Äú–ù–æ–≤–æ—Å—Ç–∏‚Äù'),
                    markdown.text(
                        '–ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π\n(–Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º',
                        markdown.hitalic('(coming soon))'),
                    ),
                    sep=': ',
                ),
                sep=' ',
            ),
            markdown.text(
                markdown.text('üìÅ'),
                markdown.text(
                    markdown.hbold('‚Äú–†–µ—Å—É—Ä—Å—ã‚Äù'),
                    markdown.text(
                        '–∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ',
                        markdown.hitalic('(coming soon)'),
                    ),
                    sep=': ',
                ),
                sep=' ',
            ),
            markdown.text(
                markdown.text('üìù'),
                markdown.text(
                    markdown.hbold('‚Äú–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è‚Äù'),
                    markdown.text('–∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç'),
                    sep=': ',
                ),
                sep=' ',
            ),
            markdown.text(
                markdown.text('üìÑ'),
                markdown.text(
                    markdown.hbold('‚Äú–ó–∞—è–≤–∫–∏‚Äù'),
                    markdown.text(
                        '–∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±—Ö–æ–¥–Ω–æ–π –ª–∏—Å—Ç, –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å, '
                        '—Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å—Ç–∏–ø–µ–Ω–¥–∏—é, –∫–æ–ø–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å–ø—Ä–∞–≤–∫–∏'
                    ),
                    sep=': ',
                ),
                sep=' ',
            ),
            sep='\n\n',
        )
        if not callback_query:
            return await app.bot.send_message(
                user_id,
                text=text,
                reply_markup=await NotifySettingsInlineKeyboard.show(
                    user_telegram_id=user_id
                ),
            )
        return await callback_query.message.edit_text(
            text=text,
            reply_markup=await NotifySettingsInlineKeyboard.show(
                user_telegram_id=user_id
            ),
        )
